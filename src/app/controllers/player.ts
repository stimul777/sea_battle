import { setShot, msgShot } from '@/app/models/socket';
import { getMyShot, getEnemyShot } from '@/app/view/grid/events';
import { onConsole } from '@/helpers/console';
import { tShot } from '@/types/ships';

class Player {
  victories: number;
  locationOfVessels: never[];
  myShips: string[];
  myShots: string[];

  constructor() {
    this.victories = 0;
    this.locationOfVessels = [];
    this.myShips = [];
    this.myShots = [];
  }

  // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
  setShips(value: string) {
    this.myShips.push(value);
  }

  // —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
  deleteShip(value: string) {
    this.myShips.splice(this.myShips.indexOf(value), 1);
  }

  // –≤—ã—Å—Ç—Ä–µ–ª –ø–æ –∫–æ—Ä–∞–±–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ üö¢
  shotAtShip(value: string) {
    this.myShots.push(value);
    onConsole('green', '–í—ã—Å—Ç—Ä–µ–ª –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É:', value);
    setShot(value);
  }

  // –í—ã—Å—Ç—Ä–µ–ª –≤ –º–µ–Ω—è
  shotAtMe(sector: string) {
    const hit = this.myShips.includes(sector);
    getMyShot({ hit, sector });

    if (hit) {
      onConsole('green', '–í –≤–∞—Å –ø–æ–ø–∞–ª–∏! –°–µ–∫—Ç–æ—Ä:', sector);
      this.deleteShip(sector);
      if (this.myShips.length === 0) this.endGame();
    } else {
      onConsole('green', '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è! –°–µ–∫—Ç–æ—Ä:', sector);
    }

    msgShot({ hit, sector });
  }

  // —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –æ–± —É—Å–ø–µ—Ö–µ\–ø—Ä–æ–º–∞—Ö–µ
  msgToPlayer(value: tShot) {
    console.log('hit', value.hit);
    console.log('hit-value', value.sector);
    value.hit
      ? onConsole('cyan', '–í—ã –ø–æ–ø–∞–ª–∏! –°–µ–∫—Ç–æ—Ä:', value.sector)
      : onConsole('cyan', '–í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å! –°–µ–∫—Ç–æ—Ä:', value.sector);
    getEnemyShot(value);
  }

  endGame() {
    alert(`–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!`);
  }
}

const player = new Player();
export { player };
